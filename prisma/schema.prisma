generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  fullName     String
  adress       String?
  city         String?
  country      String?
  wallet       Int      @default(0)
  isAdmin      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  imgCover     String?
  role         Role     @default(STUDENT)
  admin        Admin?
  student      Student?
  teacher      Teacher?
  refreshToken Token?
}

model Token {
  id        String    @id @default(uuid())
  userId    String    @unique
  token     String
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model Admin {
  id       String  @id @default(uuid())
  isSupper Boolean @default(false)
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id])
}

model Student {
  id             String          @id @default(uuid())
  userId         String          @unique
  isStudent      Boolean         @default(true)
  CoursProgress  CoursProgress[]
  CoursReview    CoursReview[]
  user           User            @relation(fields: [userId], references: [id])
  TeacherReview  TeacherReview[]
  favoritCourses Course[]        @relation("CourseToStudent")
}

model CoursProgress {
  id         String   @id @default(uuid())
  studentId  String
  coursId    String
  stage      Int      @default(1)
  isFinished Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cours      Course   @relation(fields: [coursId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])
}

model Course {
  id             String          @id @default(uuid())
  teacherId      String
  title          String
  description    String
  hasCertificate Boolean         @default(false)
  createdAt      DateTime        @default(now())
  price          Int             @default(0)
  updatedAt      DateTime        @updatedAt
  published      Boolean?        @default(false)
  imgCover       String?
  coursProgress  CoursProgress[]
  courseReviews  CoursReview?
  teacher        Teacher         @relation(fields: [teacherId], references: [id])
  courseSteps    CourseStep[]
  subCategories  SubCategory[]
  Student        Student[]       @relation("CourseToStudent")
}

model CoursReview {
  id        String   @id @default(uuid())
  courseId  String   @unique
  studentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String
  rating    Int
  course    Course   @relation(fields: [courseId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model CourseStep {
  id        String   @id @default(uuid())
  title     String
  content   String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imgCover  String?
  step      Int      @default(1)
  Course    Course   @relation(fields: [courseId], references: [id])
  video     Video?
}

model Video {
  id           String     @id @default(uuid())
  duration     Int        @default(0)
  title        String?
  description  String?
  courseStepId String     @unique
  videoLink    String
  courseStep   CourseStep @relation(fields: [courseStepId], references: [id])
}

model Category {
  id   String @id @default(uuid())
  name String @unique
}

model SubCategory {
  id         String  @id @default(uuid())
  courseId   String?
  categoryId String
  name       String  @unique
  Course     Course? @relation(fields: [courseId], references: [id])
}

model Teacher {
  id            String         @id @default(uuid())
  userId        String         @unique
  isTeacher     Boolean        @default(true)
  courses       Course[]
  skills        Skills[]
  user          User           @relation(fields: [userId], references: [id])
  teacherReview TeacherReview?
}

model Skills {
  id          String   @id @default(uuid())
  teacherId   String
  pourcent    Int      @default(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  skillName   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
}

model TeacherReview {
  id        String   @id @default(uuid())
  teacherId String   @unique
  studentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?
  rating    Int
  student   Student  @relation(fields: [studentId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
}
