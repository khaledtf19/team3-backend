generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  fullName String
  adress   String?
  city     String?
  country  String?
  wallet   Int      @default(0)
  role     Role     @default(STUDENT)
  isAdmin  Boolean  @default(false)
  admin    Admin?
  teacher  Teacher?
  student  Student?
}

model Admin {
  id       String  @id @default(uuid())
  isSupper Boolean @default(false)
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
}

model Student {
  id             String          @id @default(uuid())
  user           User            @relation(fields: [userId], references: [id])
  userId         String          @unique
  CoursProgress  CoursProgress[]
  favoritCourses Course[]
  TeacherReview  TeacherReview[]
  CoursReview    CoursReview[]
}

model CoursProgress {
  id         String  @id @default(uuid())
  student    Student @relation(fields: [studentId], references: [id])
  studentId  String
  cours      Course  @relation(fields: [coursId], references: [id])
  coursId    String
  stage      Int     @default(0)
  isFinished Boolean @default(false)
}

model Course {
  id             String          @id @default(uuid())
  teacher        Teacher         @relation(fields: [teacherId], references: [id])
  teacherId      String
  title          String
  description    String
  hasCertificate Boolean         @default(false)
  coursProgress  CoursProgress[]
  Student        Student[]
  courseReviews  CoursReview[]
  categories     Category[]
  subCategories  SubCategory[]
  courseSteps    CourseStep[]
}

model CourseStep {
  id       String  @id @default(uuid())
  title    String
  content  String
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
  video    Video?
}

model Video {
  id           String      @id @default(uuid())
  length       Int         @default(0) // length of the video in minutes
  title        String?
  description  String?
  courseStep   CourseStep? @relation(fields: [courseStepId], references: [id])
  courseStepId String?     @unique
}

model Category {
  id            String        @id @default(uuid())
  Course        Course?       @relation(fields: [courseId], references: [id])
  courseId      String?
  subCategories SubCategory[]
}

model SubCategory {
  id         String    @id @default(uuid())
  Course     Course?   @relation(fields: [courseId], references: [id])
  courseId   String?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Teacher {
  id            String          @id @default(uuid())
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @unique
  courses       Course[]
  skills        Skills[]
  teacherReview TeacherReview[]
}

model TeacherReview {
  id        String  @id @default(uuid())
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String  @unique
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
}

model CoursReview {
  id        String  @id @default(uuid())
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String  @unique
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
}

model Skills {
  id        String  @id @default(uuid())
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String  @unique
}

// ====== Enums ======
enum Role {
  ADMIN
  TEACHER
  STUDENT
}
